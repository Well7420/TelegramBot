from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboard as kb
import app.database.requests as rq

router = Router()

contact_message = f'–ó–≤\'—è–∑–æ–∫ –∑ –Ω–∞–º–∏üëá\nüì≤–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: 044111222333\nüì®Email: example@gmail.com'
about_us = f'*–¢–µ–∫—Å—Ç, —è–∫–∏–π —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—Ç–∏–º–µ –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É –º–∞–≥–∞–∑–∏–Ω—É*ü§ó'

class Order(StatesGroup):
    name = State()
    size = State()
    number = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–ü—Ä–∏–≤—ñ—Ç!\n–©–æ –í–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–æ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ?üòä', reply_markup=kb.main) # –ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é –∫–æ–º–∞–Ω–¥–∏ /start


@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä–∞üëÄ', reply_markup=await kb.categories())
    

@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —Ç–æ–≤–∞—Ä', reply_markup=await kb.items(callback.data.split('_')[1]))


@router.callback_query(F.data.startswith('item_'))
async def item(callback: CallbackQuery):
    item_data = await rq.get_item(callback.data.split('_')[1])
    await callback.answer('')
    await callback.message.answer(f'–ù–∞–∑–≤–∞: {item_data.name}\n–û–ø–∏—Å: {item_data.description}\n–í–∞—Ä—Ç—ñ—Å—Ç—å: {item_data.price}‚Ç¥', reply_markup=await kb.items(callback.data.split('_')[1]))


@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏')
async def contacts(message: Message):
    await message.answer(contact_message)


@router.message(F.text == '–ü—Ä–æ –Ω–∞—Å')
async def aboutus(message: Message):
    await message.answer(about_us)


@router.message(F.text == 'cake')
async def cake(message: Message):
    await message.answer('The cake is a lie.')


@router.message(Command('order'))
async def order(message: Message, state: FSMContext):
    await state.set_state(Order.name)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à–µ —ñ–º\'—è')

@router.message(Order.name)
async def order_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Order.size)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –±–∞–∂–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä')

@router.message(Order.size)
async def order_size(message: Message, state: FSMContext):
    await state.update_data(size=message.text)
    await state.set_state(Order.number)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)

@router.message(Order.number, F.contact)
async def order_number(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ —ñ–º\'—è: {data["name"]}\n–û–±—Ä–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ç–æ–≤–∞—Ä—É: {data["size"]}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data["number"]}')
    await state.clear()